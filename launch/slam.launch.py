import os

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node
from nav2_common.launch import RewrittenYaml


def generate_launch_description():
    pkg_delivbot = get_package_share_directory('delivbot')
    default_rtabmap_params = os.path.join(pkg_delivbot, 'config', 'rtabmap_params.yaml')
    default_ekf_params = os.path.join(pkg_delivbot, 'config', 'ekf.yaml')

    use_sim_time = LaunchConfiguration('use_sim_time')
    rtabmap_params_file = LaunchConfiguration('rtabmap_params_file')
    wheel_odom_topic = LaunchConfiguration('wheel_odom_topic')
    lidar_odom_topic = LaunchConfiguration('lidar_odom_topic')
    filtered_odom_topic = LaunchConfiguration('filtered_odom_topic')
    pointcloud_topic = LaunchConfiguration('pointcloud_topic')
    base_frame = LaunchConfiguration('base_frame')
    odom_frame = LaunchConfiguration('odom_frame')
    map_frame = LaunchConfiguration('map_frame')
    lidar_odom_frame = LaunchConfiguration('lidar_odom_frame')

    declare_use_sim_time = DeclareLaunchArgument(
        'use_sim_time',
        default_value='false',
        description='Use simulation time if available.'
    )

    declare_rtabmap_params = DeclareLaunchArgument(
        'rtabmap_params_file',
        default_value=default_rtabmap_params,
        description='Path to the RTAB-Map parameter file.'
    )

    declare_wheel_odom = DeclareLaunchArgument(
        'wheel_odom_topic',
        default_value='/odom',
        description='Wheel odometry topic from the base controller.'
    )

    declare_lidar_odom = DeclareLaunchArgument(
        'lidar_odom_topic',
        default_value='/lidar/odometry',
        description='Odometry topic generated by the ICP odometry node.'
    )

    declare_filtered_odom = DeclareLaunchArgument(
        'filtered_odom_topic',
        default_value='/odometry/filtered',
        description='Output topic for fused odometry estimate.'
    )

    declare_pointcloud = DeclareLaunchArgument(
        'pointcloud_topic',
        default_value='/lidar/points',
        description='Raw point cloud topic produced by the lidar.'
    )

    declare_base_frame = DeclareLaunchArgument(
        'base_frame',
        default_value='base_link',
        description='Robot base frame.'
    )

    declare_odom_frame = DeclareLaunchArgument(
        'odom_frame',
        default_value='odom',
        description='Odometry frame broadcast by the localization stack.'
    )

    declare_map_frame = DeclareLaunchArgument(
        'map_frame',
        default_value='map',
        description='Global map frame.'
    )

    declare_lidar_odom_frame = DeclareLaunchArgument(
        'lidar_odom_frame',
        default_value='lidar_odom',
        description='Frame id used by the ICP odometry output.'
    )

    ekf_param_substitutions = {
        'use_sim_time': use_sim_time,
        'odom0': wheel_odom_topic,
        'odom1': lidar_odom_topic,
        'odom_frame': odom_frame,
        'map_frame': map_frame,
        'base_link_frame': base_frame,
        'world_frame': odom_frame,
    }

    ekf_params = RewrittenYaml(
        source_file=default_ekf_params,
        root_key='ekf_localization_node',
        param_rewrites=ekf_param_substitutions,
        convert_types=True
    )

    rtabmap_param_substitutions = {
        'use_sim_time': use_sim_time,
        'frame_id': base_frame,
        'map_frame_id': map_frame,
        'odom_frame_id': odom_frame,
        'scan_cloud_topic': pointcloud_topic,
        'odom_topic': filtered_odom_topic,
    }

    rtabmap_params = RewrittenYaml(
        source_file=rtabmap_params_file,
        root_key='rtabmap',
        param_rewrites=rtabmap_param_substitutions,
        convert_types=True
    )

    icp_param_substitutions = {
        'use_sim_time': use_sim_time,
        'frame_id': base_frame,
        'odom_frame_id': lidar_odom_frame,
    }

    icp_params = RewrittenYaml(
        source_file=rtabmap_params_file,
        root_key='icp_odometry',
        param_rewrites=icp_param_substitutions,
        convert_types=True
    )

    icp_odometry = Node(
        package='rtabmap_odom',
        executable='icp_odometry',
        name='icp_odometry',
        output='screen',
        parameters=[icp_params, {'use_sim_time': use_sim_time}, {'subscribe_scan': False, 'subscribe_scan_cloud': True}],
        remappings=[
            ('cloud', pointcloud_topic),
            ('cloud_in', pointcloud_topic),
            ('scan_cloud', pointcloud_topic),
            ('odom', lidar_odom_topic),
            ('odom_info', '/rtabmap/odom_info'),
        ]
    )

    ekf_localization = Node(
        package='robot_localization',
        executable='ekf_node',
        name='ekf_localization',
        output='screen',
        parameters=[ekf_params, {'use_sim_time': use_sim_time}],
        remappings=[('odometry/filtered', filtered_odom_topic)]
    )

    rtabmap_node = Node(
        package='rtabmap_slam',
        executable='rtabmap',
        name='rtabmap',
        output='screen',
        parameters=[rtabmap_params, {'use_sim_time': use_sim_time}, {'subscribe_rgbd': False, 'subscribe_scan_cloud': True}],
        remappings=[
            ('scan_cloud', pointcloud_topic),
            ('cloud', pointcloud_topic),
            ('odom', filtered_odom_topic),
            ('odom_info', '/rtabmap/odom_info'),
        ]
    )

    ld = LaunchDescription()
    ld.add_action(declare_use_sim_time)
    ld.add_action(declare_rtabmap_params)
    ld.add_action(declare_wheel_odom)
    ld.add_action(declare_lidar_odom)
    ld.add_action(declare_filtered_odom)
    ld.add_action(declare_pointcloud)
    ld.add_action(declare_base_frame)
    ld.add_action(declare_odom_frame)
    ld.add_action(declare_map_frame)
    ld.add_action(declare_lidar_odom_frame)

    ld.add_action(icp_odometry)
    ld.add_action(ekf_localization)
    ld.add_action(rtabmap_node)

    return ld
